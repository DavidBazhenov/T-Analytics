import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { Category } from './schemas/category.schema';
import { CreateCategoryDto } from './dto/create-category.dto';

@Injectable()
export class CategoryService {
    constructor(
        @InjectModel('Category') private readonly categoryModel: Model<Category>,
    ) { }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    async createCategory(userId: string, createCategoryDto: CreateCategoryDto): Promise<Category> {
        const category = new this.categoryModel({ ...createCategoryDto, userId });
        return category.save();
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async createDefaultCategories(userId: string): Promise<void> {
        const defaultCategories = [
            { name: 'salary', type: 'income', icon: 'üí∞', color: '#4CAF50' },
            { name: 'advance', type: 'income', icon: 'üí∞', color: '#4CAF50' },
            { name: 'food', type: 'expense', icon: 'üõí', color: '#FF5722' },
            { name: 'transport', type: 'expense', icon: 'üöó', color: '#03A9F4' },
            { name: 'entertainment', type: 'expense', icon: 'üéÆ', color: '#FFC107' },
        ];

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userCategories = await this.getUserCategories(userId);

        // –ò—â–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const categoriesToCreate = defaultCategories.filter(
            (defaultCategory) =>
                !userCategories.some(
                    (userCategory) =>
                        userCategory.name === defaultCategory.name &&
                        userCategory.type === defaultCategory.type,
                ),
        );

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (categoriesToCreate.length > 0) {
            const categories = categoriesToCreate.map((category) => ({
                ...category,
                userId,
            }));
            await this.categoryModel.insertMany(categories);
        }
    }


    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUserCategories(userId: string): Promise<Category[]> {
        return this.categoryModel.find({ userId }).exec();
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    async deleteCategory(userId: string, categoryId: string): Promise<void> {
        const result = await this.categoryModel.deleteOne({ _id: categoryId, userId });
        if (result.deletedCount === 0) {
            throw new NotFoundException('Category not found');
        }
    }
}
